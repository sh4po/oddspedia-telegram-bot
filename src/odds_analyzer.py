import requests
from datetime import datetime, timedelta
import random
from src.config import Config

class OddsAnalyzer:
    def __init__(self):
        # GI·ªöI H·∫†N ODDS H·ª¢P L√ù - TR√ÅNH ODDS QU√Å CAO
        self.min_odds = 1.3
        self.max_odds = 3.0
        self.max_selection = Config.MAX_SELECTION
        self.api_key = Config.API_KEY
        
    def get_real_odds(self):
        """
        L·∫•y d·ªØ li·ªáu k√®o th·∫≠t t·ª´ The Odds API - ODDS CHU·∫®N
        """
        all_sports_odds = []
        
        # DANH S√ÅCH GI·∫¢I ƒê·∫§U CH·∫§T L∆Ø·ª¢NG
        sports = [
            # B√ìNG ƒê√Å CH√ÇU √ÇU
            'soccer_epl',           # Premier League
            'soccer_laliga',        # La Liga
            'soccer_serie_a',       # Serie A
            'soccer_bundesliga',    # Bundesliga
            'soccer_ligue_one',     # Ligue 1
            'soccer_uefa_champs_league', # Champions League
            
            # B√ìNG R·ªî
            'basketball_nba',       # NBA
            'basketball_euroleague', # Euroleague
        ]
        
        sport_names = {
            'soccer_epl': '‚öΩ Premier League',
            'soccer_laliga': '‚öΩ La Liga', 
            'soccer_serie_a': '‚öΩ Serie A',
            'soccer_bundesliga': '‚öΩ Bundesliga',
            'soccer_ligue_one': '‚öΩ Ligue 1',
            'soccer_uefa_champs_league': '‚öΩ Champions League',
            'basketball_nba': 'üèÄ NBA',
            'basketball_euroleague': 'üèÄ Euroleague',
        }
        
        successful_sports = 0
        
        for sport in sports:
            try:
                print(f"üîç ƒêang l·∫•y d·ªØ li·ªáu {sport_names.get(sport, sport)}...")
                
                url = f"https://api.the-odds-api.com/v4/sports/{sport}/odds"
                params = {
                    'apiKey': self.api_key,
                    'regions': 'eu',
                    'markets': 'h2h',
                    'oddsFormat': 'decimal',
                    'dateFormat': 'iso'
                }
                
                response = requests.get(url, params=params, timeout=20)
                
                if response.status_code == 200:
                    data = response.json()
                    if data:
                        sport_odds = self.process_sport_odds(data, sport, sport_names.get(sport, sport))
                        if sport_odds:  # Ch·ªâ th√™m n·∫øu c√≥ k√®o h·ª£p l·ªá
                            all_sports_odds.extend(sport_odds)
                            successful_sports += 1
                            print(f"‚úÖ {sport_names.get(sport, sport)}: {len(sport_odds)} k√®o h·ª£p l·ªá")
                        else:
                            print(f"‚ÑπÔ∏è  {sport_names.get(sport, sport)}: Kh√¥ng c√≥ k√®o ph√π h·ª£p")
                    else:
                        print(f"‚ÑπÔ∏è  {sport_names.get(sport, sport)}: Kh√¥ng c√≥ tr·∫≠n n√†o")
                elif response.status_code == 404:
                    print(f"‚ùå {sport_names.get(sport, sport)}: Gi·∫£i ƒë·∫•u kh√¥ng kh·∫£ d·ª•ng")
                else:
                    print(f"‚ùå L·ªói {sport}: {response.status_code}")
                    
            except Exception as e:
                print(f"‚ùå L·ªói k·∫øt n·ªëi {sport}: {e}")
                continue
        
        print(f"üéØ ƒê√£ thu th·∫≠p {len(all_sports_odds)} k√®o t·ª´ {successful_sports} gi·∫£i ƒë·∫•u")
        
        # N·∫øu kh√¥ng c√≥ k√®o th·∫≠t, d√πng d·ªØ li·ªáu m·∫´u
        if not all_sports_odds:
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k√®o th·∫≠t, d√πng d·ªØ li·ªáu m·∫´u")
            return self.get_sample_odds()
        
        # S·∫Øp x·∫øp theo odds h·ª£p l√Ω nh·∫•t (kh√¥ng qu√° cao, kh√¥ng qu√° th·∫•p)
        all_sports_odds.sort(key=lambda x: abs(2.0 - x['odds']))  # ∆Øu ti√™n odds g·∫ßn 2.0
        return all_sports_odds[:self.max_selection]
    
    def process_sport_odds(self, data, sport, sport_display_name):
        """
        X·ª≠ l√Ω d·ªØ li·ªáu - CH·ªà L·∫§Y ODDS CHU·∫®N & TR·∫¨N TRONG 24H
        """
        processed_odds = []
        seen_matches = set()
        
        for match in data:
            try:
                # KI·ªÇM TRA TH·ªúI GIAN - CH·ªà L·∫§Y TR·∫¨N TRONG 24H T·ªöI
                commence_time = match.get('commence_time', '')
                if not self.is_within_24_hours(commence_time):
                    continue
                
                # X·ª≠ l√Ω t√™n ƒë·ªôi
                home_team = match.get('home_team', '').strip()
                away_team = match.get('away_team', '').strip()
                
                if not home_team or not away_team:
                    continue
                
                sport_title = match.get('sport_title', sport_display_name)
                
                # T·∫°o ID duy nh·∫•t cho tr·∫≠n ƒë·∫•u
                match_id = f"{sport}_{home_team}_{away_team}"
                
                # B·ªè qua n·∫øu ƒë√£ x·ª≠ l√Ω tr·∫≠n n√†y
                if match_id in seen_matches:
                    continue
                
                # T√åM ODDS TRUNG B√åNH T·ª™ C√ÅC NH√Ä C√ÅI UY T√çN
                valid_odds = []
                trusted_bookmakers = ['bet365', 'pinnacle', 'william hill', 'bwin', 'unibet']
                
                for bookmaker in match.get('bookmakers', []):
                    bookmaker_name = bookmaker.get('title', '').lower()
                    
                    # Ch·ªâ l·∫•y t·ª´ nh√† c√°i uy t√≠n
                    if any(trusted in bookmaker_name for trusted in trusted_bookmakers):
                        for market in bookmaker.get('markets', []):
                            if market.get('key') == 'h2h':
                                for outcome in market.get('outcomes', []):
                                    odds = outcome.get('price', 0)
                                    # CH·ªà L·∫§Y ODDS TRONG KHO·∫¢NG H·ª¢P L√ù
                                    if self.min_odds <= odds <= self.max_odds:
                                        valid_odds.append(odds)
                
                # N·∫øu c√≥ √≠t nh·∫•t 2 nh√† c√°i c√≥ odds h·ª£p l√Ω, l·∫•y trung b√¨nh
                if len(valid_odds) >= 2:
                    avg_odds = sum(valid_odds) / len(valid_odds)
                    # L√†m tr√≤n ƒë·∫øn 2 ch·ªØ s·ªë th·∫≠p ph√¢n
                    final_odds = round(avg_odds, 2)
                    
                    processed_odds.append({
                        'match': f"{home_team} vs {away_team}",
                        'odds': final_odds,
                        'bookmaker': 'Multiple Trusted',
                        'match_time': self.format_match_time(commence_time),
                        'league': sport_title,
                        'sport': sport_display_name,
                        'analysis': self.generate_detailed_analysis(final_odds, home_team, away_team, sport)
                    })
                    
                    seen_matches.add(match_id)
                    
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω tr·∫≠n {sport}: {e}")
                continue
        
        return processed_odds

    def is_within_24_hours(self, commence_time_str):
        """
        Ki·ªÉm tra xem tr·∫≠n ƒë·∫•u c√≥ trong 24h t·ªõi kh√¥ng
        """
        try:
            if not commence_time_str:
                return False
                
            match_time = datetime.fromisoformat(commence_time_str.replace('Z', '+00:00'))
            now = datetime.now(match_time.tzinfo) if match_time.tzinfo else datetime.utcnow()
            
            time_diff = match_time - now
            return timedelta(0) <= time_diff <= timedelta(hours=24)
            
        except:
            return False
    
    def format_match_time(self, match_time_str):
        """
        ƒê·ªãnh d·∫°ng th·ªùi gian tr·∫≠n ƒë·∫•u
        """
        try:
            if match_time_str:
                dt = datetime.fromisoformat(match_time_str.replace('Z', '+00:00'))
                dt_vn = dt + timedelta(hours=7)
                return dt_vn.strftime('%d/%m %H:%M')
            return "S·∫Øp di·ªÖn ra"
        except:
            return "S·∫Øp di·ªÖn ra"
    
    def generate_detailed_analysis(self, odds, home_team, away_team, sport):
        """
        PH√ÇN T√çCH CHI TI·∫æT - C·∫¢I THI·ªÜN CH·∫§T L∆Ø·ª¢NG
        """
        # Ph√¢n t√≠ch theo gi√° tr·ªã odds
        if odds <= 1.5:
            risk_level = "TH·∫§P"
            confidence = "R·∫§T CAO"
            recommendation = "C∆† H·ªòI T·ªêT"
            detail = "ƒê·ªôi ch·ªß nh√† ƒë∆∞·ª£c ƒë√°nh gi√° v∆∞·ª£t tr·ªôi"
        elif odds <= 1.8:
            risk_level = "TRUNG B√åNH - TH·∫§P"
            confidence = "CAO"
            recommendation = "ƒê√ÅNG C√ÇN NH·∫ÆC"
            detail = "L·ª£i th·∫ø s√¢n nh√† r√µ r·ªát"
        elif odds <= 2.2:
            risk_level = "TRUNG B√åNH"
            confidence = "KH√Å"
            recommendation = "C√ì TI·ªÄM NƒÇNG"
            detail = "Tr·∫≠n ƒë·∫•u c√¢n b·∫±ng nghi√™ng v·ªÅ ch·ªß nh√†"
        elif odds <= 2.8:
            risk_level = "TRUNG B√åNH - CAO"
            confidence = "TRUNG B√åNH"
            recommendation = "C·∫¶N TH·∫¨N TR·ªåNG"
            detail = "ƒê·ªôi kh√°ch c√≥ th·ªÉ t·∫°o b·∫•t ng·ªù"
        else:
            risk_level = "CAO"
            confidence = "TH·∫§P"
            recommendation = "R·ª¶I RO CAO"
            detail = "C∆° h·ªôi cho b·∫•t ng·ªù"
        
        # Ph√¢n t√≠ch theo m√¥n th·ªÉ thao
        if 'soccer' in sport:
            sport_specific = [
                f"Phong ƒë·ªô s√¢n nh√† {home_team} ·ªïn ƒë·ªãnh",
                f"L·ªãch s·ª≠ ƒë·ªëi ƒë·∫ßu nghi√™ng v·ªÅ {home_team}",
                f"{home_team} c√≥ h√†ng c√¥ng m·∫°nh m·∫Ω",
                f"L·ª£i th·∫ø s√¢n nh√† r√µ r·ªát cho {home_team}",
                f"{home_team} ƒëang c√≥ chu·ªói tr·∫≠n th·∫Øng ·∫•n t∆∞·ª£ng"
            ]
        elif 'basketball' in sport:
            sport_specific = [
                f"{home_team} thi ƒë·∫•u hi·ªáu qu·∫£ tr√™n s√¢n nh√†",
                f"Phong ƒë·ªô t·∫•n c√¥ng c·ªßa {home_team} v∆∞·ª£t tr·ªôi",
                f"{home_team} c√≥ ƒë·ªôi h√¨nh g·∫ßn nh∆∞ m·∫°nh nh·∫•t",
                f"L·ªëi ch∆°i nhanh c·ªßa {home_team} t·∫°o nhi·ªÅu c∆° h·ªôi",
                f"{home_team} c√≥ h√†ng c√¥ng ·ªïn ƒë·ªãnh"
            ]
        else:
            sport_specific = [
                f"{home_team} ƒë∆∞·ª£c ƒë√°nh gi√° cao h∆°n",
                f"Phong ƒë·ªô hi·ªán t·∫°i c·ªßa {home_team} t·ªët h∆°n",
                f"{home_team} c√≥ l·ª£i th·∫ø s√¢n nh√†",
                f"ƒê·ªôi h√¨nh {home_team} m·∫°nh h∆°n ƒë·ªëi th·ªß"
            ]
        
        # K·∫øt h·ª£p ph√¢n t√≠ch
        base_analysis = random.choice(sport_specific)
        
        return f"üîç {base_analysis}. {detail} | üìä Odds: {odds} | ‚ö° {recommendation} | üõ°Ô∏è R·ªßi ro: {risk_level} | ‚úÖ ƒê·ªô tin c·∫≠y: {confidence}"
    
    def get_sample_odds(self):
        """
        D·ªØ li·ªáu m·∫´u v·ªõi ODDS CHU·∫®N
        """
        current_time = datetime.now().strftime('%d/%m %H:%M')
        print("‚ö†Ô∏è S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u ch·∫•t l∆∞·ª£ng")
        return [
            {
                'match': 'Manchester City vs Liverpool',
                'odds': 1.85,
                'bookmaker': 'Bet365',
                'match_time': current_time,
                'league': 'Premier League',
                'sport': '‚öΩ Premier League',
                'analysis': 'üîç Manchester City c√≥ phong ƒë·ªô s√¢n nh√† ·ªïn ƒë·ªãnh. L·ª£i th·∫ø s√¢n nh√† r√µ r·ªát | üìä Odds: 1.85 | ‚ö° ƒê√ÅNG C√ÇN NH·∫ÆC | üõ°Ô∏è R·ªßi ro: TRUNG B√åNH - TH·∫§P | ‚úÖ ƒê·ªô tin c·∫≠y: CAO'
            },
            {
                'match': 'LA Lakers vs Golden State Warriors', 
                'odds': 1.75,
                'bookmaker': 'William Hill',
                'match_time': current_time,
                'league': 'NBA',
                'sport': 'üèÄ NBA',
                'analysis': 'üîç LA Lakers thi ƒë·∫•u hi·ªáu qu·∫£ tr√™n s√¢n nh√†. L·ª£i th·∫ø s√¢n nh√† r√µ r·ªát | üìä Odds: 1.75 | ‚ö° ƒê√ÅNG C√ÇN NH·∫ÆC | üõ°Ô∏è R·ªßi ro: TRUNG B√åNH - TH·∫§P | ‚úÖ ƒê·ªô tin c·∫≠y: CAO'
            },
            {
                'match': 'Real Madrid vs Barcelona',
                'odds': 2.10,
                'bookmaker': 'Pinnacle', 
                'match_time': current_time,
                'league': 'La Liga',
                'sport': '‚öΩ La Liga',
                'analysis': 'üîç Real Madrid c√≥ phong ƒë·ªô s√¢n nh√† ·ªïn ƒë·ªãnh. Tr·∫≠n ƒë·∫•u c√¢n b·∫±ng nghi√™ng v·ªÅ ch·ªß nh√† | üìä Odds: 2.10 | ‚ö° C√ì TI·ªÄM NƒÇNG | üõ°Ô∏è R·ªßi ro: TRUNG B√åNH | ‚úÖ ƒê·ªô tin c·∫≠y: KH√Å'
            }
        ]
    
    def get_top_odds(self):
        """
        L·∫•y top k√®o - ∆∞u ti√™n d·ªØ li·ªáu th·∫≠t
        """
        return self.get_real_odds()

if __name__ == "__main__":
    analyzer = OddsAnalyzer()
    print("üîç ƒêang ph√¢n t√≠ch k√®o th·∫≠t t·ª´ gi·∫£i ƒë·∫•u uy t√≠n...")
    top_odds = analyzer.get_top_odds()
    print(f"üéØ T√¨m th·∫•y {len(top_odds)} k√®o ch·∫•t l∆∞·ª£ng:")
    for i, odd in enumerate(top_odds, 1):
        print(f"{i}. {odd['sport']}: {odd['match']}")
        print(f"   üìä T·ª∑ l·ªá: {odd['odds']} | üèõ {odd['bookmaker']}")
        print(f"   ‚è∞ {odd['match_time']} | {odd['analysis']}")
