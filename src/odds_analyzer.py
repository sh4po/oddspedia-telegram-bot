import requests
from datetime import datetime, timedelta
import random
from src.config import Config

class OddsAnalyzer:
    def __init__(self):
        self.min_odds = Config.MIN_ODDS
        self.max_odds = Config.MAX_ODDS
        self.max_selection = Config.MAX_SELECTION
        self.api_key = Config.API_KEY
        
    def get_real_odds(self):
        """
        L·∫•y d·ªØ li·ªáu k√®o th·∫≠t t·ª´ The Odds API - ƒêA D·∫†NG GI·∫¢I ƒê·∫§U
        """
        all_sports_odds = []
        
        # DANH S√ÅCH GI·∫¢I ƒê·∫§U ƒêA D·∫†NG
        sports = [
            # B√ìNG ƒê√Å
            'soccer',               # T·ªïng h·ª£p
            'soccer_epl',           # Premier League
            'soccer_laliga',        # La Liga
            'soccer_serie_a',       # Serie A
            'soccer_bundesliga',    # Bundesliga
            'soccer_ligue_one',     # Ligue 1
            'soccer_uefa_champs_league', # Champions League
            
            # B√ìNG R·ªî - NHI·ªÄU GI·∫¢I
            'basketball_nba',       # NBA
            'basketball_euroleague', # Euroleague
            'basketball_wnba',      # WNBA
            'basketball_ncaab',     # NCAA Men's
            
            # TENNIS THAY TH·∫æ (n·∫øu ATP l·ªói)
            'tennis_wta',           # Tennis WTA
            'americanfootball_nfl', # NFL (thay th·∫ø tennis n·∫øu c·∫ßn)
            'baseball_mlb'          # MLB (thay th·∫ø tennis n·∫øu c·∫ßn)
        ]
        
        sport_names = {
            'soccer': '‚öΩ B√≥ng ƒë√°',
            'soccer_epl': '‚öΩ Premier League',
            'soccer_laliga': '‚öΩ La Liga', 
            'soccer_serie_a': '‚öΩ Serie A',
            'soccer_bundesliga': '‚öΩ Bundesliga',
            'soccer_ligue_one': '‚öΩ Ligue 1',
            'soccer_uefa_champs_league': '‚öΩ Champions League',
            'basketball_nba': 'üèÄ NBA',
            'basketball_euroleague': 'üèÄ Euroleague',
            'basketball_wnba': 'üèÄ WNBA',
            'basketball_ncaab': 'üèÄ NCAA',
            'tennis_wta': 'üéæ Tennis WTA',
            'americanfootball_nfl': 'üèà NFL',
            'baseball_mlb': '‚öæ MLB'
        }
        
        successful_sports = 0
        
        for sport in sports:
            try:
                print(f"üîç ƒêang l·∫•y d·ªØ li·ªáu {sport_names.get(sport, sport)}...")
                
                url = f"https://api.the-odds-api.com/v4/sports/{sport}/odds"
                params = {
                    'apiKey': self.api_key,
                    'regions': 'eu,uk,us',
                    'markets': 'h2h',
                    'oddsFormat': 'decimal',
                    'dateFormat': 'iso'
                }
                
                response = requests.get(url, params=params, timeout=20)
                
                if response.status_code == 200:
                    data = response.json()
                    if data:  # Ch·ªâ x·ª≠ l√Ω n·∫øu c√≥ d·ªØ li·ªáu
                        sport_odds = self.process_sport_odds(data, sport, sport_names.get(sport, sport))
                        all_sports_odds.extend(sport_odds)
                        successful_sports += 1
                        print(f"‚úÖ T√¨m th·∫•y {len(sport_odds)} k√®o {sport_names.get(sport, sport)}")
                    else:
                        print(f"‚ÑπÔ∏è  {sport_names.get(sport, sport)}: Kh√¥ng c√≥ tr·∫≠n n√†o")
                elif response.status_code == 404:
                    print(f"‚ùå {sport_names.get(sport, sport)}: Gi·∫£i ƒë·∫•u kh√¥ng kh·∫£ d·ª•ng (404)")
                else:
                    print(f"‚ùå L·ªói {sport}: {response.status_code}")
                    
                # D·ª´ng n·∫øu ƒë√£ c√≥ ƒë·ªß d·ªØ li·ªáu t·ª´ 4-5 gi·∫£i
                if successful_sports >= 5 and len(all_sports_odds) >= 8:
                    break
                    
            except Exception as e:
                print(f"‚ùå L·ªói k·∫øt n·ªëi {sport}: {e}")
                continue
        
        print(f"üéØ ƒê√£ thu th·∫≠p t·ª´ {successful_sports} gi·∫£i ƒë·∫•u, t·ªïng {len(all_sports_odds)} k√®o")
        
        # N·∫øu kh√¥ng c√≥ k√®o th·∫≠t, d√πng d·ªØ li·ªáu m·∫´u
        if not all_sports_odds:
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k√®o th·∫≠t, d√πng d·ªØ li·ªáu m·∫´u")
            return self.get_sample_odds()
        
        # S·∫Øp x·∫øp v√† ch·ªçn top 3 t·ª´ t·∫•t c·∫£ gi·∫£i ƒë·∫•u
        all_sports_odds.sort(key=lambda x: x['odds'], reverse=True)
        return all_sports_odds[:self.max_selection]
    
    def process_sport_odds(self, data, sport, sport_display_name):
        """
        X·ª≠ l√Ω d·ªØ li·ªáu cho t·ª´ng gi·∫£i ƒë·∫•u
        """
        processed_odds = []
        seen_matches = set()
        
        for match in data:
            try:
                # X·ª≠ l√Ω t√™n ƒë·ªôi cho c√°c m√¥n kh√°c nhau
                home_team = match.get('home_team', '').strip()
                away_team = match.get('away_team', '').strip()
                
                # N·∫øu kh√¥ng c√≥ home/away team (tennis), s·ª≠ d·ª•ng c√°c tr∆∞·ªùng kh√°c
                if not home_team or not away_team:
                    # Th·ª≠ c√°c tr∆∞·ªùng kh√°c cho tennis
                    competitors = match.get('competitors', [])
                    if len(competitors) >= 2:
                        home_team = competitors[0].get('name', 'Player 1')
                        away_team = competitors[1].get('name', 'Player 2')
                    else:
                        continue
                
                sport_title = match.get('sport_title', sport_display_name)
                commence_time = match.get('commence_time', '')
                
                # T·∫°o ID duy nh·∫•t cho tr·∫≠n ƒë·∫•u
                match_id = f"{sport}_{home_team}_{away_team}"
                
                # B·ªè qua n·∫øu ƒë√£ x·ª≠ l√Ω tr·∫≠n n√†y
                if match_id in seen_matches:
                    continue
                
                # T√¨m t·ª∑ l·ªá T·ªêT NH·∫§T cho tr·∫≠n n√†y
                best_odds = None
                best_bookmaker = None
                
                for bookmaker in match.get('bookmakers', []):
                    bookmaker_name = bookmaker.get('title', 'Unknown')
                    
                    for market in bookmaker.get('markets', []):
                        if market.get('key') == 'h2h':
                            for outcome in market.get('outcomes', []):
                                odds = outcome.get('price', 0)
                                
                                # Ki·ªÉm tra t·ª∑ l·ªá c√≥ trong kho·∫£ng mong mu·ªën
                                if self.min_odds <= odds <= self.max_odds:
                                    # Ch·ªçn t·ª∑ l·ªá t·ªët nh·∫•t (cao nh·∫•t trong kho·∫£ng)
                                    if best_odds is None or odds > best_odds:
                                        best_odds = odds
                                        best_bookmaker = bookmaker_name
                
                # N·∫øu t√¨m th·∫•y k√®o ph√π h·ª£p cho tr·∫≠n n√†y
                if best_odds is not None:
                    processed_odds.append({
                        'match': f"{home_team} vs {away_team}",
                        'odds': best_odds,
                        'bookmaker': best_bookmaker,
                        'match_time': self.format_match_time(commence_time),
                        'league': sport_title,
                        'sport': sport_display_name,
                        'analysis': self.generate_analysis(best_odds, home_team, sport)
                    })
                    
                    # ƒê√°nh d·∫•u tr·∫≠n ƒë√£ x·ª≠ l√Ω
                    seen_matches.add(match_id)
                    
                # D·ª´ng khi ƒë√£ thu th·∫≠p ƒë·ªß 3 tr·∫≠n cho m·ªói gi·∫£i
                if len(processed_odds) >= 3:
                    break
                    
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω tr·∫≠n {sport}: {e}")
                continue
        
        return processed_odds
    
    def format_match_time(self, match_time_str):
        """
        ƒê·ªãnh d·∫°ng th·ªùi gian tr·∫≠n ƒë·∫•u
        """
        try:
            if match_time_str:
                dt = datetime.fromisoformat(match_time_str.replace('Z', '+00:00'))
                dt_vn = dt + timedelta(hours=7)
                return dt_vn.strftime('%d/%m/%Y %H:%M')
            return "Ch∆∞a x√°c ƒë·ªãnh"
        except:
            return "Ch∆∞a x√°c ƒë·ªãnh"
    
    def generate_analysis(self, odds, home_team, sport):
        """
        T·∫°o ph√¢n t√≠ch PH√ô H·ª¢P v·ªõi t·ª´ng m√¥n th·ªÉ thao
        """
        if 'soccer' in sport:
            analyses = [
                f"{home_team} c√≥ phong ƒë·ªô t·ªët tr√™n s√¢n nh√†",
                f"L·ªãch s·ª≠ ƒë·ªëi ƒë·∫ßu nghi√™ng v·ªÅ {home_team}",
                f"{home_team} ƒëang c√≥ chu·ªói tr·∫≠n th·∫Øng ·∫•n t∆∞·ª£ng",
                f"ƒê·ªôi h√¨nh {home_team} m·∫°nh h∆°n h·∫≥n ƒë·ªëi th·ªß",
                f"{home_team} thi ƒë·∫•u v·ªõi l·ª£i th·∫ø s√¢n nh√† r√µ r·ªát"
            ]
        elif 'basketball' in sport:
            analyses = [
                f"{home_team} thi ƒë·∫•u m·∫°nh m·∫Ω tr√™n s√¢n nh√†",
                f"Phong ƒë·ªô t·∫•n c√¥ng c·ªßa {home_team} v∆∞·ª£t tr·ªôi",
                f"{home_team} c√≥ ƒë·ªôi h√¨nh g·∫ßn nh∆∞ m·∫°nh nh·∫•t",
                f"L·ªëi ch∆°i nhanh c·ªßa {home_team} t·∫°o nhi·ªÅu c∆° h·ªôi",
                f"{home_team} c√≥ h√†ng c√¥ng ·ªïn ƒë·ªãnh trong c√°c tr·∫≠n g·∫ßn ƒë√¢y"
            ]
        elif 'tennis' in sport:
            analyses = [
                f"{home_team} ƒëang c√≥ phong ƒë·ªô cao v·ªõi t·ª∑ l·ªá {odds}",
                f"Tay v·ª£t {home_team} thi ƒë·∫•u ·ªïn ƒë·ªãnh tr√™n m·∫∑t s√¢n n√†y",
                f"{home_team} c√≥ k·ªπ thu·∫≠t giao b√≥ng v∆∞·ª£t tr·ªôi",
                f"Phong ƒë·ªô g·∫ßn ƒë√¢y c·ªßa {home_team} r·∫•t ƒë√°ng ch√∫ √Ω",
                f"{home_team} c√≥ l·ª£i th·∫ø v·ªÅ th·ªÉ l·ª±c v√† kinh nghi·ªám"
            ]
        elif 'football' in sport or 'baseball' in sport:
            analyses = [
                f"{home_team} ƒë∆∞·ª£c ƒë√°nh gi√° cao v·ªõi t·ª∑ l·ªá {odds}",
                f"{home_team} c√≥ l·ª£i th·∫ø s√¢n nh√† r√µ r·ªát",
                f"Phong ƒë·ªô hi·ªán t·∫°i c·ªßa {home_team} r·∫•t t·ªët",
                f"{home_team} c√≥ ƒë·ªôi h√¨nh m·∫°nh h∆°n ƒë·ªëi th·ªß"
            ]
        else:
            analyses = [
                f"{home_team} ƒë∆∞·ª£c ƒë√°nh gi√° cao v·ªõi t·ª∑ l·ªá {odds}",
                f"{home_team} c√≥ c∆° h·ªôi th·∫Øng l·ªõn",
                f"Phong ƒë·ªô hi·ªán t·∫°i c·ªßa {home_team} r·∫•t t·ªët"
            ]
        
        return random.choice(analyses)
    
    def get_sample_odds(self):
        """
        D·ªØ li·ªáu m·∫´u d·ª± ph√≤ng - ƒêA D·∫†NG GI·∫¢I ƒê·∫§U
        """
        current_time = datetime.now().strftime('%d/%m/%Y %H:%M')
        print("‚ö†Ô∏è S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u ƒëa gi·∫£i ƒë·∫•u")
        return [
            {
                'match': 'Manchester United vs Liverpool',
                'odds': 1.45,
                'bookmaker': 'Bet365',
                'match_time': current_time,
                'league': 'Premier League',
                'sport': '‚öΩ Premier League',
                'analysis': 'Tr·∫≠n derby n∆∞·ªõc Anh, t·ª∑ l·ªá ·ªïn ƒë·ªãnh'
            },
            {
                'match': 'LA Lakers vs Boston Celtics', 
                'odds': 1.62,
                'bookmaker': 'William Hill',
                'match_time': current_time,
                'league': 'NBA',
                'sport': 'üèÄ NBA',
                'analysis': 'Classic NBA rivalry, home court advantage'
            },
            {
                'match': 'Barcelona vs Real Madrid',
                'odds': 1.52,
                'bookmaker': 'Pinnacle', 
                'match_time': current_time,
                'league': 'La Liga',
                'sport': '‚öΩ La Liga',
                'analysis': 'El Cl√°sico - tr·∫≠n ƒë·∫•u l·ªõn nh·∫•t T√¢y Ban Nha'
            }
        ]
    
    def get_top_odds(self):
        """
        L·∫•y top k√®o - ∆∞u ti√™n d·ªØ li·ªáu th·∫≠t
        """
        return self.get_real_odds()

if __name__ == "__main__":
    analyzer = OddsAnalyzer()
    print("üîç ƒêang ph√¢n t√≠ch k√®o th·∫≠t t·ª´ ƒëa gi·∫£i ƒë·∫•u...")
    top_odds = analyzer.get_top_odds()
    print(f"üéØ T√¨m th·∫•y {len(top_odds)} k√®o:")
    for i, odd in enumerate(top_odds, 1):
        print(f"{i}. {odd['sport']}: {odd['match']}")
        print(f"   üìä T·ª∑ l·ªá: {odd['odds']} | üèõ {odd['bookmaker']}")
        print(f"   ‚è∞ {odd['match_time']} | {odd['analysis']}")